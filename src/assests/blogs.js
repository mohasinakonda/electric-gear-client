const blogs = [
    {
        author: 'Mohasin akonda',
        date: '11/12/22',
        postImg: 'https://miro.medium.com/max/1400/1*rw5i_RT5Rc5OasoWXeo1KA.jpeg',
        article: 'Optimizing application performance is key for developers who are mindful of keeping a user’s experience positive to keep them on an app and engaged. <br/> <h3>React performance optimization techniques</h3> <h3>1. Keeping component state local where necessary </h3> <p>We’ve learned that a state update in a parent component re-renders the parent and its child components.So, to ensure re-rendering a component only happens when necessary, we can extract the part of code that cares about the component state, making it local to that part of the code.</p> <h2>2. Memoizing React components to prevent unnecessary re-renders</h2> <p>Unlike the previous performance technique where refactoring our code gives us a performance boost, here we trade memory space for time. So, we must only memoize a component when necessary.<p>Memoization is an optimization strategy that caches a component-rendered operation, saves the result in memory, and returns the cached result for the same input.In essence, if a child component receives a prop, a memoized component shallowly compares the prop by default and skips re-rendering the child component if the prop hasn’t changed:</p> <h3>3. Code-splitting in React using dynamic import()</h3> <p>Code-splitting is another important optimization technique for a React application. By default, when a React application renders in a browser, a “bundle” file containing the entire application code loads and serves to users at once. This file generates by merging all the code files needed to make a web application work.The idea of bundling is useful because it reduces the number of HTTP requests a page can handle. However, as an application grows, the file sizes increase, thus increasing the bundle file. At a certain point, this continuous file increase slows the initial page load, reducing the user’s satisfaction.With code-splitting, React allows us to split a large bundle file into multiple chunks using dynamic import() followed by lazy loading these chunks on-demand using the React.lazy. This strategy greatly improves the page performance of a complex React application. To implement code-splitting, we transform a normal React import like this:</p>'


    },
    {
        author: 'Mohasin akonda',
        date: '11/12/22',
        postImg: 'https://miro.medium.com/max/1400/1*rw5i_RT5Rc5OasoWXeo1KA.jpeg',
        article: '<p>Managing state in your React apps isn’t as simple as using useState or useReducer.</p><p className="py-5">Not only are there are a lot of different kinds of state, but there often dozens of ways of managing each kind. Which should you choose?</p><h3 className="py-5 text-2xl">There are four kinds of state managements</h3> <p className="font-bold">1.Local state</p><p className="font-bold">2.Global state</p> <p className="font-bold">3.server state</p><p className="font-bold">4.URL state</p><h3 className="py-5 text-2xl">Local (UI) state </h3><p className="py-5">Local state is data we manage in one or another component.Local state is most often managed in React using the useState hook.</p><h3 className="py-5 text-2xl">Global (UI) state </h3><p className="py-5">lobal state is data we manage across multiple components.Global state is necessary when we want to get and update data anywhere in our app, or in multiple components at least.</p><h3 className="py-5 text-2xl">Server state </h3><p className="py-5">Data that comes from an external server that must be integrated with our UI state.Server state is a simple concept, but can be hard to manage alongside all of our local and global UI state.</p> <h3 className="py-5 text-2xl">URL state </h3><p className="py-5">Data that exists on our URLs, including the pathname and query parameters. URL state is often missing as a category of state, but it is an important one.In many cases, a lot of major parts of our application rely upon accessing URL state. Try to imagine building a blog without being able to fetch a post based off of its slug or id that is located in the URL!</p>'


    }
]
    < p className = "font-bold" ></p>
<p className="py-5"></p>
<h3 className="py-5 text-2xl"></h3>
<h2 className="py-5 text-3xl"></h2>